
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Raise 2
#define LAYER_Magic 3

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

#define KEYS_LEFT POS_LH_C1R2 POS_LH_C1R3 POS_LH_C1R4 POS_LH_C1R5 POS_LH_C2R1 POS_LH_C2R2 POS_LH_C2R3 POS_LH_C2R4 POS_LH_C2R5 POS_LH_C2R6 POS_LH_C3R1 POS_LH_C3R2 POS_LH_C3R3 POS_LH_C3R4 POS_LH_C3R5 POS_LH_C3R6 POS_LH_C4R1 POS_LH_C4R2 POS_LH_C4R3 POS_LH_C4R4 POS_LH_C4R5 POS_LH_C4R6 POS_LH_C5R1 POS_LH_C5R2 POS_LH_C5R3 POS_LH_C5R4 POS_LH_C5R5 POS_LH_C5R6 POS_LH_C6R1 POS_LH_C6R2 POS_LH_C6R3 POS_LH_C6R4 POS_LH_C6R5 POS_LH_C6R6
#define KEYS_RIGHT POS_RH_C1R2 POS_RH_C1R3 POS_RH_C1R4 POS_RH_C1R5 POS_RH_C2R1 POS_RH_C2R2 POS_RH_C2R3 POS_RH_C2R4 POS_RH_C2R5 POS_RH_C2R6 POS_RH_C3R1 POS_RH_C3R2 POS_RH_C3R3 POS_RH_C3R4 POS_RH_C3R5 POS_RH_C3R6 POS_RH_C4R1 POS_RH_C4R2 POS_RH_C4R3 POS_RH_C4R4 POS_RH_C4R5 POS_RH_C4R6 POS_RH_C5R1 POS_RH_C5R2 POS_RH_C5R3 POS_RH_C5R4 POS_RH_C5R5 POS_RH_C5R6 POS_RH_C6R1 POS_RH_C6R2 POS_RH_C6R3 POS_RH_C6R4 POS_RH_C6R5 POS_RH_C6R6
#define THUMBS POS_RH_T1 POS_RH_T2 POS_RH_T3 POS_RH_T4 POS_RH_T5 POS_RH_T6 POS_LH_T1 POS_LH_T2 POS_LH_T3 POS_LH_T4 POS_LH_T5 POS_LH_T6


#define TAP_TERM_MS             270
#define QUICK_TAP_MS            300
#define REQUIRE_PRIOR_IDLE_MS   250

#define INDEX_TAP_TERM_MS             170
#define INDEX_QUICK_TAP_MS            300
#define INDEX_REQUIRE_PRIOR_IDLE_MS   150

behaviors {
    // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
    // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

    hml: hold_tap_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_HOLD_TAP_LEFT";
        flavor = "tap-preferred";
        tapping-term-ms = <TAP_TERM_MS>;
        quick-tap-ms = <QUICK_TAP_MS>;
        require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
        hold-trigger-on-release;
    };

    hmli: hold_tap_left_index {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_HOLD_TAP_LEFT_INDEX";
        flavor = "tap-preferred";
        tapping-term-ms = <INDEX_TAP_TERM_MS>;
        quick-tap-ms = <INDEX_QUICK_TAP_MS>;
        require-prior-idle-ms = <INDEX_REQUIRE_PRIOR_IDLE_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
        hold-trigger-on-release;
    };

    hmr: hold_tap_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_HOLD_TAP_RIGHT";
        flavor = "tap-preferred";
        tapping-term-ms = <TAP_TERM_MS>;
        quick-tap-ms = <QUICK_TAP_MS>;
        require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
        hold-trigger-on-release;
    };

    hmri: hold_tap_right_index {
        compatible = "zmk,behavior-hold-tap";
        label = "HRM_HOLD_TAP_RIGHT_INDEX";
        flavor = "tap-preferred";
        tapping-term-ms = <INDEX_TAP_TERM_MS>;
        quick-tap-ms = <INDEX_QUICK_TAP_MS>;
        require-prior-idle-ms = <INDEX_REQUIRE_PRIOR_IDLE_MS>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
        hold-trigger-on-release;
    };

    qt: quick_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "QUICK_TAP";
        flavor = "balanced";
        tapping-term-ms = <200>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        hold-trigger-on-release;
    };    



};




};

/* Automatically generated macro definitions */
/ {
    macros {
    
    };
};

/* Automatically generated combos definitions */
/ {
    combos {
            compatible = "zmk,combos";
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1        &kp F2       &kp F3       &kp F4         &kp F5                                                                                           &kp F6       &kp F7       &kp F8           &kp F9               &kp F10
            &kp EQUAL        &kp N1       &kp N2       &kp N3         &kp N4  &kp N5                                                                    &kp N6         &kp N7       &kp N8       &kp N9           &kp N0             &kp MINUS
            &kp GRAVE         &kp Q        &kp W        &kp E          &kp R   &kp T                                                                     &kp Y          &kp U        &kp I        &kp O            &kp P              &kp PIPE
              &kp ESC  &hml LCTRL A  &hml LALT S  &hml LGUI D  &hmli LSHFT F   &kp G                                                                     &kp H  &hmri RSHFT J  &hmr RGUI K  &hmr LALT L  &hmr RCTRL SEMI               &kp SQT
            &kp MINUS         &kp Z        &kp X        &kp C          &kp V   &kp B     &kp LPAR   &kp LBRC  &kp LBKT  &kp RBKT   &kp RBRC   &kp RPAR   &kp N          &kp M    &kp COMMA      &kp DOT         &kp FSLH             &kp UNDER
 &magic LAYER_Magic 0         &none        &none        &none          &none          &lt 1 SPACE  &kp LSHFT   &kp TAB  &kp BSPC  &kp RSHFT  &lt 2 RET               &kp LEFT       &kp UP     &kp DOWN        &kp RIGHT  &magic LAYER_Magic 0
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT   &kp C_PP                                                                                   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none       &kp PAUSE_BREAK
               &trans         &none       &none       &none      &none   &kp HOME                                                  &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY       &kp PRINTSCREEN
            &kp GRAVE        &kp N1      &kp N2      &kp N3     &kp N4     &kp N5                                                                &kp N6      &kp N7        &kp N8        &kp N9           &kp N0               &kp DEL
            &kp TILDE      &kp EXCL      &kp AT    &kp HASH   &kp DLLR  &kp PRCNT                                                             &kp CARET    &kp AMPS      &kp STAR     &kp MINUS         &kp PLUS              &kp PIPE
            &kp MINUS       &kp ESC    &kp PLUS   &kp MINUS  &kp EQUAL  &kp UNDER  &trans  &trans  &trans  &trans  &trans  &trans              &kp LBKT    &kp RBKT     &kp EQUAL       &kp DOT         &kp BSLH             &kp UNDER
 &magic LAYER_Magic 0        &trans      &trans      &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans                             &none         &none         &none            &none  &magic LAYER_Magic 0
            >;
        };

        layer_Raise {
            bindings = <
  &none      &none     &none     &none   &none                                                                        &none      &none      &none   &none   &none
  &none      &none     &none     &none   &none   &none                                                     &none      &none      &none      &none   &none   &none
  &none      &none     &none     &none   &none   &none                                                     &none      &none      &none      &none   &none   &none
  &none  &kp LCTRL  &kp LALT  &kp LGUI   &none   &none                                                  &kp LEFT   &kp DOWN     &kp UP  &kp RIGHT   &none   &none
  &none      &none     &none     &none   &none   &none   &none   &none   &none   &none   &none   &none  &kp HOME  &kp PG_DN  &kp PG_UP    &kp END   &none   &none
  &none      &none     &none     &none   &none           &none   &none   &none   &none   &none   &none                &none      &none      &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
 &bootloader            &none            &none            &none       &sys_reset                                                                           &sys_reset   &none         &none              &none     &bootloader
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none       &none   &none  &out OUT_USB       &out OUT_BLE  &bt BT_CLR_ALL
       &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none       &none   &none         &none              &none           &none
      &trans       &kp C_PREV       &kp C_NEXT     &kp C_VOL_DN     &kp C_VOL_UP         &kp C_PP                                                   &none       &none   &none         &none  &kp RG(RS(EQUAL))  &kp RG(RS(N4))
  &bt BT_CLR            &bt_0            &bt_1            &bt_2            &bt_3            &none   &none   &none   &none   &none   &none   &none   &none       &none   &none         &none      &kp RG(MINUS)   &kp RG(RC(Q))
       &none            &none            &none            &none            &none                    &none   &none   &none   &none   &none   &none               &none   &none         &none              &none           &none
            >;
        };

    };
};
